import os
import tempfile
from PIL import Image as PILImage
from agno.agent import Agent
from agno.models.google import Gemini
import streamlit as st
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.media import Image as AgnoImage
import pydicom
import io
from prompts import image_query_prompt, diagnostic_query_prompt ,research_query_prompt , patient_explanation_prompt


if "GOOGLE_API_KEY" not in st.session_state:
    st.session_state.GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY", None)

with st.sidebar:
    st.title("‚ÑπÔ∏è Configuration")
    if not st.session_state.GOOGLE_API_KEY:
        api_key = st.text_input("Enter your Google API Key:", type="password")
        st.caption("Get your API key from [Google AI Studio](https://aistudio.google.com/apikey) üîë")
        if api_key:
            st.session_state.GOOGLE_API_KEY = api_key
            st.success("API Key saved!")
            st.rerun()
    else:
        st.success("API Key is configured")
        if st.button("üîÑ Reset API Key"):
            st.session_state.GOOGLE_API_KEY = None
            st.rerun()
    st.info("This tool provides AI-powered analysis of medical imaging data using advanced computer vision and radiological expertise.")

# Agent Initialization
def create_agent():
    return Agent(
        model=Gemini(id="gemini-1.5-flash", api_key=st.session_state.GOOGLE_API_KEY),
        tools=[DuckDuckGoTools()],
        markdown=True,
    ) if st.session_state.GOOGLE_API_KEY else None

image_agent = create_agent()
diagnostic_agent = create_agent()
research_agent = create_agent()
patient_agent = create_agent()

if not all([image_agent, diagnostic_agent, research_agent, patient_agent]):
    st.warning("Please configure your API key in the sidebar to continue")

# Agent Queries
image_query = image_query_prompt()

diagnostic_query = diagnostic_query_prompt()

research_query = research_query_prompt()

patient_query = patient_explanation_prompt()

st.title("üè• Medical Imaging Diagnosis Agent")
st.write("Upload a medical image for professional analysis")

upload_container = st.container()
image_container = st.container()
analysis_container = st.container()

with upload_container:
    uploaded_file = st.file_uploader("Upload Medical Image", type=["jpg", "jpeg", "png", "dicom"], help="Supported formats: JPG, JPEG, PNG, DICOM")

if uploaded_file is not None:
    with image_container:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            try:
                if uploaded_file.name.lower().endswith(".dicom"):
                    ds = pydicom.dcmread(io.BytesIO(uploaded_file.getvalue()))
                    image = PILImage.fromarray(ds.pixel_array)
                else:
                    image = PILImage.open(uploaded_file)
                width, height = image.size
                aspect_ratio = width / height
                new_width = 500
                new_height = int(new_width / aspect_ratio)
                resized_image = image.resize((new_width, new_height))
                st.image(resized_image, caption="Uploaded Medical Image", use_container_width=True)
                analyze_button = st.button("üîç Analyze Image", type="primary", use_container_width=True, key="analyze_button")
            except Exception as e:
                st.error(f"Error processing the image: {e}")
                analyze_button = False

    with analysis_container:
        if analyze_button:
            with st.spinner("üîÑ Analyzing image... Please wait."):
                try:
                    with tempfile.NamedTemporaryFile(suffix=".png", delete=True) as temp_file:
                        resized_image.save(temp_file.name)
                        agno_image = AgnoImage(filepath=temp_file.name)

                        # Run agents
                        image_response = image_agent.run(image_query, images=[agno_image]).content
                        diagnostic_response = diagnostic_agent.run(f"{diagnostic_query} {image_response}").content
                        research_response = research_agent.run(f"{research_query} {image_response}").content
                        patient_response = patient_agent.run(f"{patient_query} {image_response}").content

                        # Combine results
                        combined_response = f"""
### 1. Image Type & Region and Key Findings:
{image_response}

### 2. Diagnostic Assessment:
{diagnostic_response}

### 3. Research Context:
{research_response}

### 4. Patient-Friendly Explanation:
{patient_response}
"""
                        st.markdown("### üìã Combined Analysis Results")
                        st.markdown("---")
                        st.markdown(combined_response)
                        st.markdown("---")
                        st.caption("Note: This analysis is generated by AI and should be reviewed by a qualified healthcare professional.")
                except Exception as e:
                    st.error(f"Analysis error: {e}")
else:
    st.info("üëÜ Please upload a medical image to begin analysis")